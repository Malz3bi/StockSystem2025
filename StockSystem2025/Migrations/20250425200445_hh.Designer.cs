// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockSystem2025.Models;

#nullable disable

namespace StockSystem2025.Migrations
{
    [DbContext(typeof(StockdbContext))]
    [Migration("20250425200445_hh")]
    partial class hh
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockSystem2025.Models.CompanyDetailsView", b =>
                {
                    b.Property<double?>("Axis")
                        .HasColumnType("float");

                    b.Property<double?>("CIndicatorIn")
                        .HasColumnType("float")
                        .HasColumnName("C_IndicatorIn");

                    b.Property<double?>("CIndicatorOut")
                        .HasColumnType("float")
                        .HasColumnName("C_IndicatorOut");

                    b.Property<double?>("ChangeRate")
                        .HasColumnType("float");

                    b.Property<double?>("ChangeValue")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("Createddate")
                        .HasColumnType("date");

                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsIndicator")
                        .HasColumnType("bit");

                    b.Property<string>("ParentIndicator")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double?>("PrevSclose")
                        .HasColumnType("float")
                        .HasColumnName("PrevSClose");

                    b.Property<double?>("Sclose")
                        .HasColumnType("float")
                        .HasColumnName("SClose");

                    b.Property<string>("Sdate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("Shigh")
                        .HasColumnType("float")
                        .HasColumnName("SHigh");

                    b.Property<double?>("Slow")
                        .HasColumnType("float")
                        .HasColumnName("SLow");

                    b.Property<string>("Sname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Sopen")
                        .HasColumnType("float");

                    b.Property<string>("Sticker")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double?>("Svol")
                        .HasColumnType("float");

                    b.Property<double?>("VolMedium")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("CompanyDetailsView", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.CompanyTable", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Follow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsIndicator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<string>("ParentIndicator")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("CompanyCode")
                        .HasName("PK__tmp_ms_x__11A0134A8B5287C1");

                    b.HasIndex("ParentIndicator");

                    b.ToTable("CompanyTable", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.Criteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<bool?>("IsGeneral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("IsIndicator")
                        .HasColumnType("int")
                        .HasComment("0  = false, 1 = true, 2 = all");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasColumnType("ntext");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("Separater")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Criterias");
                });

            modelBuilder.Entity("StockSystem2025.Models.DigitalAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Bottom")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("BottomValueDate")
                        .HasColumnType("date");

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<bool>("ShowDescriptionColumn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<double>("TopValue")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("TopValueDate")
                        .HasColumnType("date");

                    b.Property<int>("WavesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("WavesVisibility")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id");

                    b.ToTable("DigitalAnalysis", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.DigitalAnalysisDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DigitalAnalysisId")
                        .HasColumnType("int")
                        .HasColumnName("DigitalAnalysisID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<bool>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("DigitalAnalysisId");

                    b.ToTable("DigitalAnalysisData");
                });

            modelBuilder.Entity("StockSystem2025.Models.EconLinksType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EconLinksTypes");
                });

            modelBuilder.Entity("StockSystem2025.Models.EconomicLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("EconomicLinks");
                });

            modelBuilder.Entity("StockSystem2025.Models.FollowList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("FirstSupport")
                        .HasColumnType("float");

                    b.Property<double?>("FirstTarget")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("SecondSupport")
                        .HasColumnType("float");

                    b.Property<double?>("SecondTarget")
                        .HasColumnType("float");

                    b.Property<double?>("StopLoss")
                        .HasColumnType("float");

                    b.Property<double?>("ThirdTarget")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FollowList", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.FollowListCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<int?>("FollowListId")
                        .HasColumnType("int")
                        .HasColumnName("FollowListID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("FollowListId");

                    b.ToTable("FollowListCompanies");
                });

            modelBuilder.Entity("StockSystem2025.Models.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int")
                        .HasColumnName("CriteriaID");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("FormulaType")
                        .HasColumnType("int");

                    b.Property<string>("FormulaValues")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("StockSystem2025.Models.GeneralDetailedStockView", b =>
                {
                    b.Property<double?>("Axis")
                        .HasColumnType("float");

                    b.Property<double?>("CIndicatorIn")
                        .HasColumnType("float")
                        .HasColumnName("C_IndicatorIn");

                    b.Property<double?>("CIndicatorOut")
                        .HasColumnType("float")
                        .HasColumnName("C_IndicatorOut");

                    b.Property<double?>("ChangeRate")
                        .HasColumnType("float");

                    b.Property<double?>("ChangeValue")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("Createddate")
                        .HasColumnType("date");

                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<double?>("GIndicatorIn")
                        .HasColumnType("float")
                        .HasColumnName("G_IndicatorIn");

                    b.Property<double?>("GIndicatorOut")
                        .HasColumnType("float")
                        .HasColumnName("G_IndicatorOut");

                    b.Property<double?>("PrevSclose")
                        .HasColumnType("float")
                        .HasColumnName("PrevSClose");

                    b.Property<double?>("SIndicatorIn")
                        .HasColumnType("float")
                        .HasColumnName("S_IndicatorIn");

                    b.Property<double?>("SIndicatorOut")
                        .HasColumnType("float")
                        .HasColumnName("S_IndicatorOut");

                    b.Property<double?>("Sclose")
                        .HasColumnType("float")
                        .HasColumnName("SClose");

                    b.Property<string>("Sdate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("Shigh")
                        .HasColumnType("float")
                        .HasColumnName("SHigh");

                    b.Property<double?>("Slow")
                        .HasColumnType("float")
                        .HasColumnName("SLow");

                    b.Property<string>("Sname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Sopen")
                        .HasColumnType("float");

                    b.Property<string>("Sticker")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double?>("Svol")
                        .HasColumnType("float");

                    b.Property<double?>("VolMedium")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("GeneralDetailedStockView", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.GeneralIndicatorView", b =>
                {
                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<double?>("IndicatorIn")
                        .HasColumnType("float");

                    b.Property<double?>("IndicatorOut")
                        .HasColumnType("float");

                    b.Property<string>("Sticker")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.ToTable((string)null);

                    b.ToView("GeneralIndicatorView", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DaysMedium")
                        .HasColumnType("int");

                    b.Property<bool>("ForChart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("ForTable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mediums");
                });

            modelBuilder.Entity("StockSystem2025.Models.ProfessionalFibonacci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BottomValue")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("BottomValueDate")
                        .HasColumnType("date");

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double>("FibonacciPercentageValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<bool>("ShowDescriptionColumn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<double>("TopValue")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("TopValueDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("ProfessionalFibonacci", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.ProfessionalFibonacciDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProfessionalFibonacciId")
                        .HasColumnType("int")
                        .HasColumnName("ProfessionalFibonacciID");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<bool>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalFibonacciId");

                    b.ToTable("ProfessionalFibonacciData");
                });

            modelBuilder.Entity("StockSystem2025.Models.RecommendationsResultsView", b =>
                {
                    b.Property<double?>("ChangeRate")
                        .HasColumnType("float");

                    b.Property<double?>("ChangeValue")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("Createddate")
                        .HasColumnType("date");

                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<double?>("ExpectedOpen")
                        .HasColumnType("float");

                    b.Property<double?>("ExpectedOpenPercent")
                        .HasColumnType("float");

                    b.Property<double?>("ExpectedOpenValue")
                        .HasColumnType("float");

                    b.Property<bool>("IsIndicator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<double?>("LowerLimitRate")
                        .HasColumnType("float");

                    b.Property<double?>("LowerLimitValue")
                        .HasColumnType("float");

                    b.Property<double?>("NextSclose")
                        .HasColumnType("float")
                        .HasColumnName("NextSClose");

                    b.Property<double?>("NextShigh")
                        .HasColumnType("float")
                        .HasColumnName("NextSHigh");

                    b.Property<double?>("OpeningGapRate")
                        .HasColumnType("float")
                        .HasColumnName("openingGapRate");

                    b.Property<double?>("OpeningGapValue")
                        .HasColumnType("float")
                        .HasColumnName("openingGapValue");

                    b.Property<string>("ParentIndicator")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double?>("PrevExpectedOpen")
                        .HasColumnType("float");

                    b.Property<double?>("PrevSclose")
                        .HasColumnType("float")
                        .HasColumnName("PrevSClose");

                    b.Property<double?>("PrevShigh")
                        .HasColumnType("float")
                        .HasColumnName("PrevSHigh");

                    b.Property<double?>("PrevSlow")
                        .HasColumnType("float")
                        .HasColumnName("PrevSLow");

                    b.Property<double?>("PrevSopen")
                        .HasColumnType("float");

                    b.Property<double?>("PrevSvol")
                        .HasColumnType("float");

                    b.Property<double?>("Sclose")
                        .HasColumnType("float")
                        .HasColumnName("SClose");

                    b.Property<string>("Sdate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("Shigh")
                        .HasColumnType("float")
                        .HasColumnName("SHigh");

                    b.Property<double?>("Slow")
                        .HasColumnType("float")
                        .HasColumnName("SLow");

                    b.Property<string>("Sname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Sopen")
                        .HasColumnType("float");

                    b.Property<string>("Sticker")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double?>("Svol")
                        .HasColumnType("float");

                    b.Property<double?>("UpperLimitRate")
                        .HasColumnType("float");

                    b.Property<double?>("UpperLimitValue")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("RecommendationsResultsView", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.RefreshedPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PageURL");

                    b.HasKey("Id");

                    b.ToTable("RefreshedPage", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.SectorDetailedStockView", b =>
                {
                    b.Property<double?>("Axis")
                        .HasColumnType("float");

                    b.Property<double?>("ChangeRate")
                        .HasColumnType("float");

                    b.Property<double?>("ChangeValue")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("Createddate")
                        .HasColumnType("date");

                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<double?>("GIndicatorIn")
                        .HasColumnType("float")
                        .HasColumnName("G_IndicatorIn");

                    b.Property<double?>("GIndicatorOut")
                        .HasColumnType("float")
                        .HasColumnName("G_IndicatorOut");

                    b.Property<double?>("PrevSclose")
                        .HasColumnType("float")
                        .HasColumnName("PrevSClose");

                    b.Property<double?>("SIndicatorIn")
                        .HasColumnType("float")
                        .HasColumnName("S_IndicatorIn");

                    b.Property<double?>("SIndicatorOut")
                        .HasColumnType("float")
                        .HasColumnName("S_IndicatorOut");

                    b.Property<double?>("Sclose")
                        .HasColumnType("float")
                        .HasColumnName("SClose");

                    b.Property<string>("Sdate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("Shigh")
                        .HasColumnType("float")
                        .HasColumnName("SHigh");

                    b.Property<double?>("Slow")
                        .HasColumnType("float")
                        .HasColumnName("SLow");

                    b.Property<string>("Sname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Sopen")
                        .HasColumnType("float");

                    b.Property<string>("Sticker")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double?>("Svol")
                        .HasColumnType("float");

                    b.Property<double?>("VolMedium")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("SectorDetailedStockView", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.SectorIndicatorVeiw", b =>
                {
                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<double?>("IndicatorIn")
                        .HasColumnType("float");

                    b.Property<double?>("IndicatorOut")
                        .HasColumnType("float");

                    b.Property<string>("ParentIndicator")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Sticker")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.ToTable((string)null);

                    b.ToView("SectorIndicatorVeiw", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Settings__3214EC2795A6AAB3");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("StockSystem2025.Models.StockPrevDayView", b =>
                {
                    b.Property<double?>("ChangeRate")
                        .HasColumnType("float");

                    b.Property<double?>("ChangeValue")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("Createddate")
                        .HasColumnType("date");

                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<double?>("IndicatorIn")
                        .HasColumnType("float");

                    b.Property<double?>("IndicatorOut")
                        .HasColumnType("float");

                    b.Property<bool>("IsIndicator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<string>("ParentIndicator")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double?>("PrevSclose")
                        .HasColumnType("float")
                        .HasColumnName("PrevSClose");

                    b.Property<double?>("PrevShigh")
                        .HasColumnType("float")
                        .HasColumnName("PrevSHigh");

                    b.Property<double?>("PrevSlow")
                        .HasColumnType("float")
                        .HasColumnName("PrevSLow");

                    b.Property<double?>("PrevSopen")
                        .HasColumnType("float");

                    b.Property<double?>("PrevSvol")
                        .HasColumnType("float");

                    b.Property<double?>("Sclose")
                        .HasColumnType("float")
                        .HasColumnName("SClose");

                    b.Property<string>("Sdate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("Shigh")
                        .HasColumnType("float")
                        .HasColumnName("SHigh");

                    b.Property<double?>("Slow")
                        .HasColumnType("float")
                        .HasColumnName("SLow");

                    b.Property<string>("Sname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Sopen")
                        .HasColumnType("float");

                    b.Property<string>("Sticker")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<double?>("Svol")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("StockPrevDayView", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.StockTable", b =>
                {
                    b.Property<string>("Sticker")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Sdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<double?>("ExpectedOpen")
                        .HasColumnType("float");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Sclose")
                        .HasColumnType("float")
                        .HasColumnName("SClose");

                    b.Property<double?>("Shigh")
                        .HasColumnType("float")
                        .HasColumnName("SHigh");

                    b.Property<double?>("Slow")
                        .HasColumnType("float")
                        .HasColumnName("SLow");

                    b.Property<string>("Sname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Sopen")
                        .HasColumnType("float");

                    b.Property<double?>("Svol")
                        .HasColumnType("float");

                    b.HasKey("Sticker", "Sdate");

                    b.ToTable("StockTable", (string)null);
                });

            modelBuilder.Entity("StockSystem2025.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Bundle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "IX_Users_UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StockSystem2025.Models.CompanyTable", b =>
                {
                    b.HasOne("StockSystem2025.Models.CompanyTable", "ParentIndicatorNavigation")
                        .WithMany("InverseParentIndicatorNavigation")
                        .HasForeignKey("ParentIndicator")
                        .HasConstraintName("FK_CompanyTable_CompanyTable");

                    b.Navigation("ParentIndicatorNavigation");
                });

            modelBuilder.Entity("StockSystem2025.Models.Criteria", b =>
                {
                    b.HasOne("StockSystem2025.Models.User", "User")
                        .WithMany("Criteria")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Criterias_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockSystem2025.Models.DigitalAnalysisDatum", b =>
                {
                    b.HasOne("StockSystem2025.Models.DigitalAnalysis", "DigitalAnalysis")
                        .WithMany("DigitalAnalysisData")
                        .HasForeignKey("DigitalAnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_DigitalAnalysisData_DigitalAnalysis");

                    b.Navigation("DigitalAnalysis");
                });

            modelBuilder.Entity("StockSystem2025.Models.EconomicLink", b =>
                {
                    b.HasOne("StockSystem2025.Models.EconLinksType", "Type")
                        .WithMany("EconomicLinks")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EconomicLinks_EconLinksTypes");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("StockSystem2025.Models.FollowList", b =>
                {
                    b.HasOne("StockSystem2025.Models.User", "User")
                        .WithMany("FollowLists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FollowList_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockSystem2025.Models.FollowListCompany", b =>
                {
                    b.HasOne("StockSystem2025.Models.CompanyTable", "CompanyCodeNavigation")
                        .WithMany("FollowListCompanies")
                        .HasForeignKey("CompanyCode")
                        .HasConstraintName("FK_FollowListCompanies_CompanyTable");

                    b.HasOne("StockSystem2025.Models.FollowList", "FollowList")
                        .WithMany("FollowListCompanies")
                        .HasForeignKey("FollowListId")
                        .HasConstraintName("FK_FollowListCompanies_FollowList");

                    b.Navigation("CompanyCodeNavigation");

                    b.Navigation("FollowList");
                });

            modelBuilder.Entity("StockSystem2025.Models.Formula", b =>
                {
                    b.HasOne("StockSystem2025.Models.Criteria", "Criteria")
                        .WithMany("Formulas")
                        .HasForeignKey("CriteriaId")
                        .IsRequired()
                        .HasConstraintName("FK_Formulas_Criterias");

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("StockSystem2025.Models.Medium", b =>
                {
                    b.HasOne("StockSystem2025.Models.User", "User")
                        .WithMany("Media")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Mediums_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockSystem2025.Models.ProfessionalFibonacciDatum", b =>
                {
                    b.HasOne("StockSystem2025.Models.ProfessionalFibonacci", "ProfessionalFibonacci")
                        .WithMany("ProfessionalFibonacciData")
                        .HasForeignKey("ProfessionalFibonacciId")
                        .IsRequired()
                        .HasConstraintName("FK_ProfessionalFibonacciData_ProfessionalFibonacci");

                    b.Navigation("ProfessionalFibonacci");
                });

            modelBuilder.Entity("StockSystem2025.Models.CompanyTable", b =>
                {
                    b.Navigation("FollowListCompanies");

                    b.Navigation("InverseParentIndicatorNavigation");
                });

            modelBuilder.Entity("StockSystem2025.Models.Criteria", b =>
                {
                    b.Navigation("Formulas");
                });

            modelBuilder.Entity("StockSystem2025.Models.DigitalAnalysis", b =>
                {
                    b.Navigation("DigitalAnalysisData");
                });

            modelBuilder.Entity("StockSystem2025.Models.EconLinksType", b =>
                {
                    b.Navigation("EconomicLinks");
                });

            modelBuilder.Entity("StockSystem2025.Models.FollowList", b =>
                {
                    b.Navigation("FollowListCompanies");
                });

            modelBuilder.Entity("StockSystem2025.Models.ProfessionalFibonacci", b =>
                {
                    b.Navigation("ProfessionalFibonacciData");
                });

            modelBuilder.Entity("StockSystem2025.Models.User", b =>
                {
                    b.Navigation("Criteria");

                    b.Navigation("FollowLists");

                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
